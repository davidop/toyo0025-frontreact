# 🚀 Pipeline Simple para Desarrolladores Junior
# Solo 2 etapas: Build → Deploy

stages:
  - build
  - deploy

variables:
  NODE_VERSION: '18'

# 🔨 ETAPA 1: Construir la aplicación
build:
  stage: build
  image: node:$NODE_VERSION
  only:
    - main
    - develop
    - master
  script:
    - echo "📦 Instalando dependencias..."
    - npm ci --cache .npm --prefer-offline --silent
    - echo "🔨 Construyendo aplicación React..."
    - npm run build --silent
    - echo "📁 Preparando archivos para Azure..."
    - cp server.js dist/
    - cp package.json dist/
    - cp web.config dist/
    - echo "📦 Instalando dependencias de producción..."
    - cd dist && npm ci --only=production --silent && cd ..
    - echo "✅ Build completado exitosamente!"
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  cache:
    paths:
      - .npm/
      - node_modules/

# 🚀 ETAPA 2: Desplegar a Azure (AUTOMÁTICO)
deploy:
  stage: deploy
  image: ubuntu:20.04
  only:
    - main
    - develop
    - master
  when: on_success # � Deploy automático cuando el build sea exitoso
  dependencies:
    - build
  before_script:
    - echo "🌐 Preparando despliegue a Azure..."
    - apt-get update -qq && apt-get install -y -qq curl zip grep sed > /dev/null 2>&1
  script:
    - echo "📦 Empaquetando aplicación..."
    - cd dist
    - zip -r ../deploy.zip . -x "*.git*" "node_modules/.cache/*" -q
    - cd ..
    - echo "📦 Paquete creado:" && ls -lh deploy.zip
    - echo "🚀 Desplegando a Azure App Service..."
    - |
      if [ -z "$AZURE_WEBAPP_PUBLISH_PROFILE" ]; then
        echo "❌ ERROR: Falta configurar AZURE_WEBAPP_PUBLISH_PROFILE"
        echo "📋 Sigue los pasos en DEPLOYMENT-GUIDE.md"
        exit 1
      fi
    - echo "$AZURE_WEBAPP_PUBLISH_PROFILE" > publishprofile.xml
    - |
      # Extraer datos del publish profile
      SITE_NAME=$(grep -o 'publishUrl="[^"]*"' publishprofile.xml | head -1 | sed 's/publishUrl="//;s/".*//')
      USER_NAME=$(grep -o 'userName="[^"]*"' publishprofile.xml | head -1 | sed 's/userName="//;s/".*//')
      USER_PWD=$(grep -o 'userPWD="[^"]*"' publishprofile.xml | head -1 | sed 's/userPWD="//;s/".*//')

      # Debug: Verificar que las variables se extrajeron correctamente
      echo "🔍 Verificando configuración..."
      echo "📍 Sitio: $SITE_NAME"
      echo "👤 Usuario: ${USER_NAME:0:10}..."
      echo "🔑 Password: ${USER_PWD:+[SET]}"
      
      # Verificar que el archivo ZIP existe y no está vacío
      if [ ! -f deploy.zip ]; then
        echo "❌ ERROR: No se encontró deploy.zip"
        exit 1
      fi
      
      if [ ! -s deploy.zip ]; then
        echo "❌ ERROR: deploy.zip está vacío"
        exit 1
      fi

      echo "🌍 Desplegando a: $SITE_NAME"
      echo "📦 Tamaño del paquete: $(ls -lh deploy.zip | awk '{print $5}')"

      # Deploy usando Web Deploy REST API con mejor manejo de errores
      echo "🔄 Iniciando despliegue..."
      
      # Función para intentar el despliegue con reintentos
      MAX_RETRIES=3
      RETRY_COUNT=0
      
      while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
        # Crear archivo temporal para capturar respuesta
        RESPONSE_FILE=$(mktemp)
        HTTP_CODE=$(curl -X POST \
          "https://$SITE_NAME/api/zipdeploy" \
          -u "$USER_NAME:$USER_PWD" \
          -H "Content-Type: application/zip" \
          -T deploy.zip \
          --write-out "%{http_code}" \
          --output "$RESPONSE_FILE" \
          --silent \
          --show-error \
          --connect-timeout 30 \
          --max-time 300)
        
        echo "📊 Código de respuesta HTTP: $HTTP_CODE (intento $((RETRY_COUNT + 1))/$MAX_RETRIES)"
        
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 202 ]; then
          echo "✅ Despliegue exitoso (HTTP $HTTP_CODE)"
          echo "📄 Respuesta del servidor:"
          cat "$RESPONSE_FILE" | head -10
          rm -f "$RESPONSE_FILE"
          break
        elif [ "$HTTP_CODE" -eq 409 ]; then
          echo "⏳ Conflicto detectado (HTTP 409) - Otro despliegue en curso"
          echo "📄 Respuesta del servidor:"
          cat "$RESPONSE_FILE" | head -5
          rm -f "$RESPONSE_FILE"
          
          RETRY_COUNT=$((RETRY_COUNT + 1))
          if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
            WAIT_TIME=$((30 + RETRY_COUNT * 15))
            echo "⌛ Esperando ${WAIT_TIME}s antes del siguiente intento..."
            sleep $WAIT_TIME
          fi
        else
          echo "❌ Error en el despliegue (HTTP $HTTP_CODE)"
          echo "📄 Respuesta del servidor:"
          cat "$RESPONSE_FILE" | head -20
          rm -f "$RESPONSE_FILE"
          exit 1
        fi
      done
      
      if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
        echo "❌ Máximo de reintentos alcanzado. El servidor sigue ocupado."
        exit 1
      fi
    - echo "🎉 ¡Despliegue completado!"
    - echo "🌐 Tu aplicación está disponible en:"
    - echo "   https://dev-tae-eu-w-tes-cms-win.azurewebsites.net"
  after_script:
    - rm -f publishprofile.xml deploy.zip 2>/dev/null || true
    - echo "🧹 Archivos temporales eliminados"
# 📋 Información para desarrolladores junior:
#
# 1. Este pipeline se ejecuta automáticamente en las ramas: main, develop, master
# 2. El BUILD es automático - instala dependencias y construye React
# 3. El DEPLOY es AUTOMÁTICO - se ejecuta inmediatamente después del build exitoso
# 4. Necesitas configurar AZURE_WEBAPP_PUBLISH_PROFILE en Variables de GitLab
# 5. Sigue la guía en DEPLOYMENT-GUIDE.md si es tu primera vez
#
# ⚠️  ATENCIÓN: Los cambios se despliegan automáticamente a producción
# ¿Problemas? Revisa los logs del pipeline o pide ayuda al equipo senior
